{{- if and .Values.filter.kubernetescustom.enable -}}
{{- if and .Values.parser.kubernetescustomloglevel.enable -}}
apiVersion: fluentbit.fluent.io/v1alpha2
kind: ClusterParser
metadata:
  name: kubernetescustomloglevel
  namespace: {{ .Values.namespace | default "default" }}
  labels:
    fluentbit.fluent.io/enabled: "true"
spec:
  regex:
    regex: '^.*(?<LOG_LEVEL>(WARN|INFO|DEBUG|ERROR|FATAL|TRACE|PANIC)) (?<LOG_MESSAGE>.*)$'
{{- end }}
---
apiVersion: fluentbit.fluent.io/v1alpha2
kind: ClusterFilter
metadata:
  name: kubernetescustom
  namespace: {{ .Values.namespace | default "default" }}
  labels:
    fluentbit.fluent.io/enabled: "true"
    fluentbit.fluent.io/component: logging
spec:
  match: kube.*
  filters:
    # Parse log level
    {{ if and .Values.parser.kubernetescustomloglevel.enable -}}
    - parser:
        keyName: log
        parser: kubernetescustomloglevel
        reserveData: true
        preserveKey: true
    {{ end }}
    - kubernetes:
        kubeCAFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        kubeTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubeURL: https://kubernetes.default.svc:443
        labels: {{ .Values.filter.kubernetescustom.kubernetes.labels }}
        annotations: {{ .Values.filter.kubernetescustom.kubernetes.annotations }}
        mergeLog: true
        mergeLogTrim: true
        bufferSize: "3M"
        useKubelet: false
    - nest:
        addPrefix: kubernetes_
        nestedUnder: kubernetes
        operation: lift
    - modify:
        rules:
          - remove: stream
          - remove: kubernetes_pod_id
          - remove: kubernetes_host
          - remove: kubernetes_container_hash
    - nest:
        nestUnder: kubernetes
        operation: nest
        removePrefix: kubernetes_
        wildcard:
          - kubernetes_*
    # Filter pod names
    - lua:
        script:
          key: filter_pods.lua
          name: fluent-kubernetescustom-lua
        call: filter_pods
    # Reformat message
    - lua:
        script:
          key: format.lua
          name: fluent-kubernetescustom-lua
        call: format
        timeAsTable: true
    # Filter log levels
    - lua:
        script:
          key: filter_loglevel.lua
          name: fluent-kubernetescustom-lua
        call: filter_loglevel
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-kubernetescustom-lua
  namespace: {{ .Values.namespace | default "default" }}
data:
  filter_pods.lua: |
    function filter_pods(tag, timestamp, record)
      -- Ignore logs without kubernetes metadata
      if not record["kubernetes"] then
        return -1, 0, 0
      end

      -- Ignore fluent-bit logs
      if record["kubernetes"]["container_name"] == "fluent-bit" then
        return -1, 0, 0
      end

      -- Ignore unknown container logs
      if not record["kubernetes"]["container_name"] then
        return -1, 0, 0
      end

      {{ if .Values.filter.kubernetescustom.excluded }}{{ if .Values.filter.kubernetescustom.excluded.pods }}
      local excludedPods = {
        {{- range $_, $p := .Values.filter.kubernetescustom.excluded.pods }}
          ['{{ $p }}']=true,
        {{- end }}
      }

      if excludedPods[record["kubernetes"]["container_name"]] then
        return -1, 0, 0
      end
      {{ end }}{{ end }}

      {{ if .Values.filter.kubernetescustom.included }}{{ if .Values.filter.kubernetescustom.included.pods }}
      local includedPods = {
        {{- range $_, $p := .Values.filter.kubernetescustom.included.pods }}
          ['{{ $p }}']=true,
        {{- end }}
      }

      if not includedPods[record["kubernetes"]["container_name"]] then
        return -1, 0, 0
      end
      {{ end }}{{ end }}

      return 2, timestamp, record
    end

  format.lua: |
    function format(tag, timestamp, record)
      new_record = {}

      {{ if .Values.filter.kubernetescustom.include_record }}
      new_record["record"] = record
      {{ end }}

      timeStr = os.date("!*t", timestamp["sec"])
      t = string.format("%4d-%02d-%02dT%02d:%02d:%02d.%sZ",
      timeStr["year"], timeStr["month"], timeStr["day"],
      timeStr["hour"], timeStr["min"], timeStr["sec"],
      timestamp["nsec"])

      kubernetes = {}
      new_record["time"] = t
      new_record["log"] = {}
      new_record["kubernetes"] = record["kubernetes"]
      new_record["serviceName"] = record["kubernetes"]["container_name"]
      new_record["log"]["org"] = record["MESSAGE"]
      new_record["log"]["message"] = record["MESSAGE"]

      new_record = parseSystemdMessage(record, new_record)
      -- If systemd massage was parsed with level and message, use it
      if new_record["log"]["level"] then
        return 1, timestamp, new_record
      end

      if record["kubernetes"]["container_name"] == "rocketchat" then
        return 1, timestamp, parseRocketchatMessage(record, new_record)
      elseif record["kubernetes"]["container_name"] == "mongodb" then
        return 1, timestamp, parseMongoDBMessage(record, new_record)
      elseif record["kubernetes"]["container_name"] == "userservice" then
        return 1, timestamp, parseUserserviceMessage(record, new_record)
      end

      return 2, timestamp, new_record
    end

    function parseSystemdMessage(record, new_record)
      if record["LOG_MESSAGE"] and record["LOG_MESSAGE"] ~= "" then
        new_record["log"]["message"] = record["LOG_MESSAGE"]
      end
      if record["LOG_LEVEL"] and record["LOG_LEVEL"] ~= "" then
        new_record["log"]["level"] = record["LOG_LEVEL"]
      end

      return new_record
    end

    function parseRocketchatMessage(record, new_record)
      new_record["log"]["message"] = ""
      if record["msg"] and record["msg"] ~= "" then
        new_record["log"]["message"] = record["msg"]
      end
      if record["method"] then
        new_record["log"]["message"] = new_record["log"]["message"].." - "..record["method"]
      end
      if record["name"] then
        new_record["log"]["message"] = new_record["log"]["message"].." - "..record["name"]
      end
      if record["url"] then
        new_record["log"]["message"] = new_record["log"]["message"].." - "..record["url"]
      end

      if record["level"] then
        if record["level"] >= 60 then
          new_record["log"]["level"] = "FATAL"
        elseif record["level"] == 51 then
          new_record["log"]["level"] = "INFO"
        elseif record["level"] >= 50 then
          new_record["log"]["level"] = "ERROR"
        elseif record["level"] >= 40 then
          new_record["log"]["level"] = "WARN"
        elseif record["level"] >= 30 then
          new_record["log"]["level"] = "INFO"
        elseif record["level"] >= 20 then
          new_record["log"]["level"] = "DEBUG"
        elseif record["level"] >= 10 then
          new_record["log"]["level"] = "TRACE"
        end
      end

      return new_record
    end

    function parseMongoDBMessage(record, new_record)
      if record["msg"] then
          new_record["log"]["message"] = record["msg"]
      end
      if record["s"] == "I" then
        new_record["log"]["level"] = "INFO"
      elseif record["s"] == "W" then
        new_record["log"]["level"] = "WARN"
      elseif record["s"] == "E" then
        new_record["log"]["level"] = "ERROR"
      elseif record["s"] == "F" then
        new_record["log"]["level"] = "FATAL"
      else
        new_record["log"]["level"] = "DEBUG"
      end

      return new_record
    end

    function parseUserserviceMessage(record, new_record)
      -- Read msg for json input (userservice)
      if record["log"] then
        if record["log"]["message"] then
          new_record["log"]["message"] = record["log"]["message"]
        end
        if record["log"]["level"] then
          new_record["log"]["level"] = record["log"]["level"]
        end
      end

      return new_record
    end

  filter_loglevel.lua: |
    function filter_loglevel(tag, timestamp, record)
      {{ if .Values.filter.kubernetescustom.excluded }}{{ if .Values.filter.kubernetescustom.excluded.loglevels }}
      local excludedLogLevels = {
        {{- range $_, $p := .Values.filter.kubernetescustom.excluded.loglevels }}
          ['{{ $p }}']=true,
        {{- end }}
      }

      if record["log"]["level"] and excludedLogLevels[record["log"]["level"]] then
        return -1, 0, 0
      end
      {{ end }}{{ end }}

      {{ if .Values.filter.kubernetescustom.included }}{{ if .Values.filter.kubernetescustom.included.loglevels }}
      local includedLogLevels = {
        {{- range $_, $p := .Values.filter.kubernetescustom.included.loglevels }}
          ['{{ $p }}']=true,
        {{- end }}
      }

      if (not record["log"]["level"]) or (not includedLogLevels[record["log"]["level"]]) then
        return -1, 0, 0
      end
      {{ end }}{{ end }}

      return 2, timestamp, record
    end
{{- end }}